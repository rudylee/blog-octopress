<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://rudylee.github.io/atom.xml" rel="self"/>
  <link href="http://rudylee.github.io/"/>
  <updated>2013-07-15T21:00:49+10:00</updated>
  <id>http://rudylee.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with Google Map API]]></title>
    <link href="http://rudylee.github.io/2013/05/27/playing-with-google-map-api/"/>
    <updated>2013-05-27T11:16:02+10:00</updated>
    <id>http://rudylee.github.io/2013/05/27/playing-with-google-map-api</id>
    <content type="html"><![CDATA[<p>The main purpose of this post is only to write about Google Map API for future reference. Here are the code snippets :</p>

<p>Get the latitude and longitude based on address : <a href="http://maps.googleapis.com/maps/api/geocode/json?address=435A%20Kent%20St&amp;sensor=true">http://maps.googleapis.com/maps/api/geocode/json?address=435A%20Kent%20St&amp;sensor=true</a></p>

<p>The code below set up the Google Map, put the marker and also make it grayscale</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">initialize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">map</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">location</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="o">-</span><span class="mf">33.87190930</span><span class="p">,</span> <span class="mf">151.20480740</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">featureType</span><span class="o">:</span> <span class="s2">&quot;all&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">elementType</span><span class="o">:</span> <span class="s2">&quot;all&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">stylers</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span> <span class="nx">saturation</span><span class="o">:</span> <span class="o">-</span><span class="mi">100</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mapOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">center</span><span class="o">:</span> <span class="nx">location</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">zoom</span><span class="o">:</span> <span class="mi">17</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">mapTypeControlOptions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">mapTypeId</span><span class="o">:</span> <span class="p">[</span><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">MapTypeId</span><span class="p">.</span><span class="nx">ROADMAP</span><span class="p">,</span> <span class="s1">&#39;theGray&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;map-canvas&quot;</span><span class="p">),</span> <span class="nx">mapOptions</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mapType</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">StyledMapType</span><span class="p">(</span><span class="nx">styles</span><span class="p">,</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span><span class="s2">&quot;GrayScale&quot;</span> <span class="p">});</span>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">mapTypes</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;theGray&#39;</span><span class="p">,</span> <span class="nx">mapType</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">setMapTypeId</span><span class="p">(</span><span class="s1">&#39;theGray&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">position</span><span class="o">:</span> <span class="nx">location</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">map</span><span class="o">:</span> <span class="nx">map</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">addDomListener</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="nx">initialize</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Override module config in Zend Framework 2]]></title>
    <link href="http://rudylee.github.io/2013/05/16/override-module-config-in-zend-framework-2/"/>
    <updated>2013-05-16T11:12:19+10:00</updated>
    <id>http://rudylee.github.io/2013/05/16/override-module-config-in-zend-framework-2</id>
    <content type="html"><![CDATA[<p>There is a time when you want to override module config in your Zend Framework 2 application. In my case, I have different configuration for SMS gateway in staging and live server. You can do this by overwriting the module.config.php file inside the module config&rsquo;s folder. However, there are heaps of configuration inside module.config.php file. This approach will lead to maintenance nightmare when you need to change one or more configuration inside the file.</p>

<p>The cleanest approach is to override specific configuration key by creating module-name.local.php file inside config/autoload folder. For example, you have &ldquo;Admin&rdquo; module and here is the sample module.config.php file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">return</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;sms&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rudy&#39;</span><span class="p">,</span> <span class="c1">//API access username</span>
</span><span class='line'>        <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rudy&#39;</span><span class="p">,</span> <span class="c1">//API access password</span>
</span><span class='line'>        <span class="s1">&#39;sender&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Rudy&#39;</span><span class="p">,</span> <span class="c1">// max of 11 alphanumeric or max of 15 numerical characters</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can override only the username by creating admin.local.php file inside config/autoload folder and put this code inside it :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">return</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;sms&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;override&#39;</span><span class="p">,</span> <span class="c1">//API access username</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Zend Framework 2 will read this file and overwrite the username key inside module.config.php. Now you can create script during your deployment process to create this file automatically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zend Framework 2 : The proper way to set application path in Javascript Object]]></title>
    <link href="http://rudylee.github.io/2013/05/06/zend-framework-2-the-proper-way-to-set-application-path-in-javascript-object/"/>
    <updated>2013-05-06T14:44:36+10:00</updated>
    <id>http://rudylee.github.io/2013/05/06/zend-framework-2-the-proper-way-to-set-application-path-in-javascript-object</id>
    <content type="html"><![CDATA[<p>Storing application path inside Javascript object is a way to avoid &ldquo;hard coded&rdquo; URL inside your Javascript file.  It is pretty common to have like this in your Javascript file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">POST</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://localhost/my-website/register&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="nx">dataJSON</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>That approach is completely fine. However, when you need to deploy your application, you need to manually change all the URL to match with your server. The solution that I have been using for quite a long time is setting up Javascript object that contains path to my application.</p>

<p>In CakePHP, this can be easily done by using URL method inside Router Class. Here is the sample :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$cbunny</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;APP_PATH&#39;</span> <span class="o">=&gt;</span> <span class="nx">Router</span><span class="o">::</span><span class="na">url</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">scriptBlock</span><span class="p">(</span><span class="s1">&#39;var CbunnyObj = &#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Javascript</span><span class="o">-&gt;</span><span class="na">object</span><span class="p">(</span><span class="nv">$cbunny</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Zend Framework 2, you have to rely on serverUrl and basePath to achieve the same thing. Here is the proper way to do it in Zend Framework 2 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="c1">//&lt;![CDATA[</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">CMSObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;APP_PATH&quot;</span><span class="o">:</span><span class="s2">&quot;&lt;?php echo $this-&gt;serverUrl() . $this-&gt;basePath() ?&gt;/&quot;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="c1">//]]&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My review after two months using VIM]]></title>
    <link href="http://rudylee.github.io/2013/03/30/my-review-after-two-months-using-vim/"/>
    <updated>2013-03-30T23:35:41+11:00</updated>
    <id>http://rudylee.github.io/2013/03/30/my-review-after-two-months-using-vim</id>
    <content type="html"><![CDATA[<p>On January ( Two months ago ) , I decided to learn Vim after watching screencast from <a href="http://www.destroyallsoftware.com">Destroy All Software</a>. In one of the screencast, the guy shows how fast you can program when using Vim and use plugin to make it even better.</p>

<p>I have known Vim for 4 years now but never actually keen to learn all the shortcuts. I remember I been to one of the PHP meetup in my city and one guy was presenting some of his code using Vim. One of the audience commented &ldquo;Why you need to use Vim if you have IDE and all of the GUI ?&rdquo;. At that time, I couldn&rsquo;t agree more with that guy.</p>

<p>I had always thought Vim&rsquo;s user are just trying to show off that they are different and superior. Using Vim basically separate them from GUI&rsquo;s group and put them one level above. At least, that&rsquo;s what I was thinking and apparently I am wrong.</p>

<p>After started using Vim, I can feel that I am more productive and less stressful when programming. All the shortcuts definitively help you to avoid redundancy and remove your reliance on mouse. You can navigate through the source code by only using keyboard.</p>

<p><a href="http://www.amazon.com/Practical-Vim-Thought-Pragmatic-Programmers/dp/1934356980/ref=sr_1_1?ie=UTF8&amp;qid=1364646960&amp;sr=8-1&amp;keywords=vim"><img src="http://blog.rudylee.com/wp-content/uploads/2013/03/41LK8SwU4WL._SX225_-150x150.jpg" alt="Practical Vim" /></a></p>

<p>The book that I am using to learn VIM is<a href="http://www.amazon.com/Practical-Vim-Thought-Pragmatic-Programmers/dp/1934356980/ref=sr_1_1?ie=UTF8&amp;qid=1364646960&amp;sr=8-1&amp;keywords=vim"> &ldquo;Practical Vim : Edit Text at the Speed of Thought&rdquo; by Drew Neil</a>. If you are new with Vim, I&rsquo;ll strongly recommend to start with this book. This book has collection of tips on how to use Vim in real situation and you going to feel you learn Vim faster.</p>

<p>However, before deciding to learn Vim, you need to know that Vim is not for everyone. You know that you are not suitable for Vim when you :</p>

<ul>
<li><p>Still looking at your keyboard when typing.</p></li>
<li><p>Have problem or hate remembering shortcuts.</p></li>
<li><p>Don&rsquo;t have any curiosity to find another way to achieve something.</p></li>
</ul>


<p>If you are an IDE fan such as Eclipse, Netbeans or Visual Studio. There are some plugins that you can download to unleash the Vim power in your IDE. At the moment, I am using <a href="http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329">VsVim</a> to use all the Vim shortcuts when programming in C#. If you want to become better programmer, I&rsquo;ll say start using Vim and you won&rsquo;t regret it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zend Framework 2 : get server URL in controller without using serverUrl()]]></title>
    <link href="http://rudylee.github.io/2013/02/15/zend-framework-2-get-server-url-in-controller-without-using-serverurl/"/>
    <updated>2013-02-15T16:22:35+11:00</updated>
    <id>http://rudylee.github.io/2013/02/15/zend-framework-2-get-server-url-in-controller-without-using-serverurl</id>
    <content type="html"><![CDATA[<p>Sometimes you need to be able to get current server URL inside controller in your Zend Framework 2 application. As you might know, you won&rsquo;t be able to use $this->serverUrl() method in the controller as it&rsquo;s a part of helper.</p>

<p>So, here is the code that I am using to get server URL in controller :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$server_url</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getRequest</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getUri</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getScheme</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39;://&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getRequest</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getUri</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getHost</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Probably it&rsquo;s not the best solution but it works for now :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap Typeahead CakePHP 2.0]]></title>
    <link href="http://rudylee.github.io/2013/02/02/bootstrap-typeahead-cakephp-2-0/"/>
    <updated>2013-02-02T20:13:35+11:00</updated>
    <id>http://rudylee.github.io/2013/02/02/bootstrap-typeahead-cakephp-2-0</id>
    <content type="html"><![CDATA[<h2></h2>

<p>Demo : <a href="http://cbunny2.rudylee.com/users/typeahead">http://cbunny2.rudylee.com/users/typeahead</a>
Source : <a href="https://github.com/rudylee/cbunny">https://github.com/rudylee/cbunny</a></p>

<p>In this post, I&rsquo;ll explain how to integrate Twitter Bootstrap Typeahead with your CakePHP 2.0 application. We will avoid using helpers or plugins and stick with plain Javascript + jQuery. Make sure you have include jQuery, Bootstrap CSS and Bootstrap Javascript files in your CakePHP application. You can simply do it inside your default.ctp file ( the files are bootstrap.min.js and bootstrap.min.css ).</p>

<p>After that we will create controller, action and view to put our input box. In this tutorial I&rsquo;ll use my Cbunny application and Users controller. I&rsquo;ll start by creating typeahead action, here is the code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">typeahead</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">recursive</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">paginate</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing special happening rather than get current users from the table and paginate them. And here is the view :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Typeahead Auto Complete --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-provide=</span><span class="s">&quot;typeahead&quot;</span> <span class="na">id=</span><span class="s">&quot;user-typeahead&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span><span class="cp">&lt;?php echo __(&#39;Users&#39;);?&gt;</span><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;table&quot;</span><span class="na">cellpadding=</span><span class="s">&quot;0&quot;</span> <span class="na">cellspacing=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>            <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;id&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;username&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;password&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;created&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;modified&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;?php echo __(&#39;Actions&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>            <span class="cp">&lt;?php foreach ($users as $user): ?&gt;</span>
</span><span class='line'>            <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;id&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;username&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;password&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;created&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;modified&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="cp">&lt;?php echo $this-&gt;Html-&gt;link(__(&#39;View&#39;), array(&#39;action&#39; =&gt; &#39;view&#39;, $user[&#39;User&#39;][&#39;id&#39;])); ?&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>            <span class="cp">&lt;?php endforeach; ?&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On line 5-7, I am defining input text with typeahead attribute and ID that we will use in Javascript code. The next step is to create Javascript object in your layout file. So add this code snippet in your default.ctp file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$cbunny</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;APP_PATH&#39;</span> <span class="o">=&gt;</span> <span class="nx">Router</span><span class="o">::</span><span class="na">url</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">scriptBlock</span><span class="p">(</span><span class="s1">&#39;var CbunnyObj = &#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Javascript</span><span class="o">-&gt;</span><span class="na">object</span><span class="p">(</span><span class="nv">$cbunny</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can change the $cbunny and CBunnyObj variable name to resemble your app name. However, the rest of the code has to be same as above. This snippet of code will create Javascript object which contains the root URL path of CakePHP.</p>

<p>After we have the Javascript object variable, let&rsquo;s continue by creating the Javascript code. Inside your application Javascript file add these code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#user-typeahead&#39;</span><span class="p">).</span><span class="nx">typeahead</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">process</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">CbunnyObj</span><span class="p">.</span><span class="nx">APP_PATH</span> <span class="o">+</span> <span class="s1">&#39;users/typeahead_search&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="nx">q</span><span class="o">:</span> <span class="nx">query</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">process</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, we initialize the typeahead library and create AJAX request to the typeahead_search action. In the next step, we will create typeahead_search action that will handle AJAX request and return JSON result. Back to our users controller, create the typeahead action which will contain this code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">typeahead_search</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">autoRender</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">RequestHandler</span><span class="o">-&gt;</span><span class="na">respondAs</span><span class="p">(</span><span class="s1">&#39;json&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get the search term from URL</span>
</span><span class='line'>    <span class="nv">$term</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">[</span><span class="s1">&#39;q&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$users</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;all&#39;</span><span class="p">,</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;User.username LIKE&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;%&#39;</span><span class="o">.</span><span class="nv">$term</span><span class="o">.</span><span class="s1">&#39;%&#39;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Format the result for select2</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$users</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">array_push</span><span class="p">(</span><span class="nv">$result</span><span class="p">,</span> <span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;User&#39;</span><span class="p">][</span><span class="s1">&#39;username&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$users</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$users</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This action will receive the request, search the database for relevant result and return it on JSON format.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Select2 AJAX Auto Complete with CakePHP 2.0]]></title>
    <link href="http://rudylee.github.io/2013/02/02/select2-ajax-auto-complete-with-cakephp-2-0/"/>
    <updated>2013-02-02T19:09:26+11:00</updated>
    <id>http://rudylee.github.io/2013/02/02/select2-ajax-auto-complete-with-cakephp-2-0</id>
    <content type="html"><![CDATA[<h2>Demo : <a href="http://cbunny2.rudylee.com/users/select2">http://cbunny2.rudylee.com/users/select2</a></h2>

<p>Source : <a href="https://github.com/rudylee/cbunny">https://github.com/rudylee/cbunny</a></p>

<p>In this post, I&rsquo;ll explain how to use <a href="http://ivaynberg.github.com/select2/">Select2</a> inside CakePHP. We will avoid using any helpers and rely on jQuery + Javascript. Before we start, I presume you have downloaded Select2 and included the Javascript and CSS files inside your layout. Thus, I won&rsquo;t explain how to import Select2 library into your CakePHP app ( you can download my cbunny app from Github if you are lost ).</p>

<p>So the first step is to create controller that will contain our Select2 search box. In this tutorial, I&rsquo;ll create users controller and one action to put the select2 search box. Here is the snippet of my code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">select2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">recursive</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">paginate</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this you can create the view ( View/Users/select2.ctp ). Here is my view code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Select2 Auto Complete --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;user-select2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span><span class="cp">&lt;?php echo __(&#39;Users&#39;);?&gt;</span><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;table&quot;</span><span class="na">cellpadding=</span><span class="s">&quot;0&quot;</span> <span class="na">cellspacing=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>            <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;id&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;username&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;password&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;created&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th&gt;</span><span class="cp">&lt;?php echo $this-&gt;Paginator-&gt;sort(&#39;modified&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span><span class="cp">&lt;?php echo __(&#39;Actions&#39;);?&gt;</span><span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>            <span class="cp">&lt;?php foreach ($users as $user): ?&gt;</span>
</span><span class='line'>            <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;id&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;username&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;password&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;created&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?php echo h($user[&#39;User&#39;][&#39;modified&#39;]); ?&gt;</span> <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="cp">&lt;?php echo $this-&gt;Html-&gt;link(__(&#39;View&#39;), array(&#39;action&#39; =&gt; &#39;view&#39;, $user[&#39;User&#39;][&#39;id&#39;])); ?&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>            <span class="cp">&lt;?php endforeach; ?&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look at 5-7 you&rsquo;ll notice that I have input element with id element user-select2. We will use the ID inside our jQuery to initiate the Select2. The next step after this is to create a Javascript object to store the dynamic app path. Add this snippet of code into your layout file ( default.ctp ).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$cbunny</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;APP_PATH&#39;</span> <span class="o">=&gt;</span> <span class="nx">Router</span><span class="o">::</span><span class="na">url</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">scriptBlock</span><span class="p">(</span><span class="s1">&#39;var CbunnyObj = &#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Javascript</span><span class="o">-&gt;</span><span class="na">object</span><span class="p">(</span><span class="nv">$cbunny</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can change the $cbunny and CBunnyObj variable name to resemble your app name. However, the rest of the code has to be same as above. This snippet of code will create Javascript object which contains the root URL path of CakePHP.</p>

<p>After we have the Javascript object, we will create jQuery code to create Select2 search box, process AJAX request and handle the respond. I&rsquo;ll start with creating cbunny.js file inside my webroot folder and add the file in my layout file. Here is the code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*global $, document, CbunnyObj */</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#user-select2&#39;</span><span class="p">).</span><span class="nx">select2</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">placeholder</span><span class="o">:</span> <span class="s2">&quot;Search user auto complete&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">minimumInputLength</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ajax</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">CbunnyObj</span><span class="p">.</span><span class="nx">APP_PATH</span> <span class="o">+</span> <span class="s1">&#39;users/search&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">term</span><span class="p">,</span> <span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">q</span><span class="o">:</span> <span class="nx">term</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">results</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="nx">results</span><span class="o">:</span> <span class="nx">data</span> <span class="p">};</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll explain the Javascript code a little bit. Line 4-19 contain the definition of Select2 library. You can see we have ajax definition on line 7 which will perform AJAX request to  CbunnyObj.APP_PATH + &lsquo;users/search&rsquo;. CbunnyObj is javascript object variable that we have defined before and will translate into your CakePHP App path ( ex: <a href="http://cbunny.rudylee.com">http://cbunny.rudylee.com</a> ). I believe you understand the rest of the code as I just copied it from Select2 website.</p>

<p>After this, our last step is to create action + view to handle the AJAX request. So we are going back to Users controller and add new action called &lsquo;search&rsquo;. Here is my &lsquo;search&rsquo; action code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">search</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">autoRender</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get the search term from URL</span>
</span><span class='line'>    <span class="nv">$term</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">[</span><span class="s1">&#39;q&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$users</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;all&#39;</span><span class="p">,</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;User.username LIKE&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;%&#39;</span><span class="o">.</span><span class="nv">$term</span><span class="o">.</span><span class="s1">&#39;%&#39;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Format the result for select2</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$users</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span><span class="p">[</span><span class="nv">$key</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;User&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$result</span><span class="p">[</span><span class="nv">$key</span><span class="p">][</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;User&#39;</span><span class="p">][</span><span class="s1">&#39;username&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$users</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$users</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On line 5, we grab the search query term from the URL and store into $term variable. After that, we will perform normal query to the table. When we get the result, we won&rsquo;t be able to use it straight away. We will have to reformat it so it can be readable by Select2. On line 12-17 we basically iterate through the $users variable and create new associative array which has id and text as their key.</p>

<p>That&rsquo;s it for the tutorial. If you are confuse, feel free to write comment below and I&rsquo;ll be happy to answer them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Science of Productivity]]></title>
    <link href="http://rudylee.github.io/2013/01/15/science-of-productivity/"/>
    <updated>2013-01-15T22:58:18+11:00</updated>
    <id>http://rudylee.github.io/2013/01/15/science-of-productivity</id>
    <content type="html"><![CDATA[<p>Continuing from my <a href="http://blog.rudylee.com/2013/01/14/my-journey-to-productivity/">previous post about productivity</a>, I just found a video that you guys might wanna check out. It covers some of the techniques from my previous post such as make your todo list doable and set up the morning dash.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My journey to productivity]]></title>
    <link href="http://rudylee.github.io/2013/01/14/my-journey-to-productivity/"/>
    <updated>2013-01-14T15:03:15+11:00</updated>
    <id>http://rudylee.github.io/2013/01/14/my-journey-to-productivity</id>
    <content type="html"><![CDATA[<p>Today marks two weeks of my journey trying new method to boost my productivity. For several years, I am an avid fan of procrastination which I am still now. This has bring me a lot of troubles such as projects are off-schedule, self development postponed, and working on assignments at the last minute. I have tried several productivity techniques and sadly say, none of them show significant effect. One of the popular technique that I used is <a href="http://www.pomodorotechnique.com/">Pomodoro</a> technique. For you guys that never heard about Pomodoro, I suggest to click the link provided. For you guys that are too lazy to click the link, here is the deinition of Pomodoro that I grabbed from the website :</p>

<blockquote><p>It is a time management method created by Francesco Cirillo in the 1980s that helps you accomplish what you want to do by transforming time into a valuable ally. Why is it so popular? Because it is easy to use, and most of all, because it works!</p></blockquote>

<p>Basically the Pomodoro technique tells you to pick a task, working on it under certain time limit ( usually 25 minutes ), take a break for 5 minutes and repeat the same process again. Each cycle is what called Pomodoro, after you have finished 4 Pomodoro, you are allowed to take longer break ( 30 minutes ).</p>

<p>From my personal experience, it is a good technique but you need huge amount of self discipline. People with lack of self discipline tend to lose their focus in the middle of Pomodoro. Most of the time I am only able to do 2 perfect Pomodoro without any distractions, sometimes even less. After that usually I am end up watching Youtube, checking Facebook or even playing games.</p>

<h3>Lifehacker</h3>

<p>I am a type of person that definitely lack of self discipline. I can force and motivate myself to finish a work if there is someone watching my back, for example working in an office environment where you have colleagues monitoring what you are doing. However, one month ago I was trying find a new way to solve this problem because I am on Uni holiday and close to Christmas holiday.</p>

<p>My first choice to find solution is <a href="http://www.lifehacker.com.au/">Lifehacker</a> website. It is one of the popular websites that provides information to boost your productivity in simple ways ( sometimes ). However, because it has lot of articles, most of the time you find it hard to find article that suit your problem.</p>

<p>After trying various keywords to help me find article that match my problem, I decided to give up and looking for books instead. Luckily it&rsquo;s not that difficult because as soon as I typed &lsquo;lifehacker&rsquo; in Amazon, it comes up with this <a href="http://www.amazon.com/Lifehacker-Working-Smarter-Faster-ebook/dp/B0055AUGG8/ref=sr_1_2?ie=UTF8&amp;qid=1357975024&amp;sr=8-2&amp;keywords=lifehacker">book</a> ( Lifehacker: The Guide to Working Smarter, Faster, and Better ). The book basically contains the same articles from the website but the good part is all the articles has been grouped into relevant chapter for easier search and read.</p>

<p>I&rsquo;ll suggest you skip most of the chapters in the book and only focus on the chapters that can solve your problem. In my case, I am only focus on these topics :</p>

<ol>
<li><p> Make your To-Do List Doable. Based on <a href="http://lifehacker.com/270404/how-to-make-your-to+do-list-doable">this article</a>.</p></li>
<li><p> Set Up a Morning Dash.</p></li>
<li><p> Dash through tasks with a timer.</p></li>
<li><p> Limit visits to Time-Wasting websites.</p></li>
</ol>


<p>Out of those 4 topics, my favourite is number one. To-do list is a must have thing in my daily life. Not only it is useful to remind you what to do, but it also useful as a planning tool. Unfortunately, for the past few years I have done a simple mistake and made most of my to-do items in my list untouched. The mistake is simply on the way I write the todo items.</p>

<p>Before I read this article, I tend to put things such as &ldquo;Redesign personal website&rdquo;, &ldquo;Working on project A&rdquo;, and &ldquo;Working on project B&rdquo; in my todo list. According to the article, these type of tasks cannot be called tasks but projects. Tasks are more descriptive and can be done in short time. So if we pick redesign personal website project, some examples of the tasks are create the sitemap or create the home screen wire frame based on sitemap.</p>

<p>The first time I tried this approach, I am little bit sceptical. But believe it or not, I am find it easier to focus on my tasks when I write clearer task. The problem with unclear task are you will spend time to figure what to do and the chances that it will affect your motivation is higher.</p>

<p>I think that&rsquo;s all for this article, I&rsquo;ll try share my experience in the next article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No prefix support for mapResources in CakePHP 2.x]]></title>
    <link href="http://rudylee.github.io/2012/11/28/no-prefix-support-for-mapresources-in-cakephp-2-x/"/>
    <updated>2012-11-28T13:45:18+11:00</updated>
    <id>http://rudylee.github.io/2012/11/28/no-prefix-support-for-mapresources-in-cakephp-2-x</id>
    <content type="html"><![CDATA[<p>REST API is relatively easy to implement if you are using web framework to build your application. In Rails, you just need to add single &lsquo;resources&rsquo;  entry in your routing file. In CakePHP, it has similar solution as you can read in the <a href="http://book.cakephp.org/2.0/en/development/rest.html">Cookbook</a>. However, currently there is no prefix support in CakePHP 2.x and this is confirmed in these links :</p>

<ul>
<li><p><a href="http://cakephp.lighthouseapp.com/projects/42648/tickets/968-rest-routes-with-prefix">http://cakephp.lighthouseapp.com/projects/42648/tickets/968-rest-routes-with-prefix</a></p></li>
<li><p><a href="https://github.com/cakephp/cakephp/pull/763">https://github.com/cakephp/cakephp/pull/763</a></p></li>
</ul>


<p>This is a drawback because you are most likely will use prefix to build REST API. In my case, I have products controller in my application which has default CRUD actions and another set of actions with prefix ( api_index, api_view, etc ). Those actions with prefix in front of it will act as our RESTful API.</p>

<p>You can try another approach by creating separate controller only to handle API request. For example, you will have to create controller called products_api to handle all restful API for specific controller. I am not a fan of this approach because you might end up having a lot of files and it&rsquo;s difficult to maintain.</p>

<p>So, if you are on the same boat as me, you can follow this solution that I found. This solution only requires you to add one line of code to Router.php file in CakePHP lib folder ( <a href="https://github.com/DiegoMax/cakephp/commit/f203202ff78da930b472ecce817fdc6f19d6dfda">https://github.com/DiegoMax/cakephp/commit/f203202ff78da930b472ecce817fdc6f19d6dfda</a> ).</p>

<p>Not a best solution but I don&rsquo;t want to wait until CakePHP 3.x released to finish my first CakePHP + Backbone.JS app. That&rsquo;s all, have a nice day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Precise Pangolin]]></title>
    <link href="http://rudylee.github.io/2012/07/31/precise-pangolin/"/>
    <updated>2012-07-31T17:33:37+10:00</updated>
    <id>http://rudylee.github.io/2012/07/31/precise-pangolin</id>
    <content type="html"><![CDATA[<p>After spending whole day moving all my data from Ubuntu partition, I am officially running Ubuntu 12.04 64 bit. Prior to this, I was using Ubuntu 12.04 32 bit which I continuously upgrade from Ubuntu 10.04 ( it&rsquo;s been 2 years since I decided to use Ubuntu as my main operating system, time flew so fast ). It was running really slow as I have a lot of applications installed ( Rails, Django, Android SDK, Eclipse, Netbeans, etc ).</p>

<p>Basically I am happy with my new &ldquo;fresh&rdquo; installation of Ubuntu. Everything seems to run 3-4 faster than before. Booting time only takes around 20 secs from 1-2 minutes, Sublime Text fired up as soon as I clicked it and Chrome jumping smoothly like kangaroo. However, I just realize that I forgot to back up my Thunderbird email account ( damn!). Before, I set up my Thunderbird email account in POP which means that it will delete all the emails in the server. So now I am losing 17 months of emails archive which I have to explain to my boss soon.</p>

<p>So here are my applications line up for my &ldquo;fresh&rdquo; OS :
* Email Client : Thunderbird.
* IDE Text Editor : Sublime Text 2 and Vim.
* Web Server : Apache ( I was considering using Nginx, however it will take too much time rewriting all the .htaccess rule into Nginx configuration. I can&rsquo;t afford that ).
* Web Browser : Chrome.
* Source Control : Git and SVN.
* Music Player : Rhythm box ( stay with default ).
* Coming soon&hellip;</p>

<p>Next stop ? Installing Windows 7 64 bit and VirtualBox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curry Noodle]]></title>
    <link href="http://rudylee.github.io/2012/07/08/curry-noodle/"/>
    <updated>2012-07-08T17:43:22+10:00</updated>
    <id>http://rudylee.github.io/2012/07/08/curry-noodle</id>
    <content type="html"><![CDATA[<p>Last week I found video tutorial to cook curry noodle in <a href="http://www.youtube.com/watch?v=lMrFr8Eh_yM">YouTube</a> and decided to give it a try. Before, I cooked different type of curry (red and green curry ) and always made my own curry paste. The taste wasn&rsquo;t bad but obviously something missing and I don&rsquo;t know what it is.</p>

<p>This weekend I am gonna do something different by using pre-made curry paste. After researching a little bit, I found people recommend to use Mae Ploy Curry Paste which they say is used in some of Thai restaurants in Australia. Here is the picture :</p>

<p><a href="http://blog.rudylee.com/wp-content/uploads/2012/07/mae-ploy.jpg"><img src="http://blog.rudylee.com/wp-content/uploads/2012/07/mae-ploy-150x150.jpg" alt="" /></a></p>

<p>And here is the complete list of ingredients:</p>

<ul>
<li>Noodle ( any kind of noodle, I am using Hokkien noodle ).</li>
<li>Curry Paste ( Mae Ploy ).</li>
<li>Coconut Milk ( main ingredient ).</li>
<li>Shallot.</li>
<li>Garlic.</li>
<li>Red Onion.</li>
<li>Spring Onion.</li>
<li>Chicken Breast.</li>
<li>Prawns ( quite expensive, $5 for 10 prawns ).</li>
<li>Fried Tofu.</li>
<li>Chili Sauce ( I am using ABC Chili Sauce ).</li>
<li>Lemon Grass.</li>
<li>Hard Boiled Eggs ( optional ).</li>
<li>Shrimp Paste ( I switched dried shrimp in the video with this shrimp paste because the price of dried shrimp is too expensive ).</li>
<li>Sugar and Salt for tasting.</li>
</ul>


<p>I am not gonna explain how to cook it as you can learn it yourself from the video. You don&rsquo;t need to follow all the ingredients and try to experiment with your own style ( which I did ). And here is the final result of my Red Curry without the noodle :</p>

<p><a href="http://blog.rudylee.com/wp-content/uploads/2012/07/curry.jpg"><img src="http://blog.rudylee.com/wp-content/uploads/2012/07/curry-150x150.jpg" alt="" /></a></p>

<p>The taste is milder than my previous curry ( thanks to the Mae Ploy pre-made curry paste ). Next destination is Thai Green Curry or probably Pad Thai.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assembla]]></title>
    <link href="http://rudylee.github.io/2012/04/10/assembla/"/>
    <updated>2012-04-10T15:43:50+10:00</updated>
    <id>http://rudylee.github.io/2012/04/10/assembla</id>
    <content type="html"><![CDATA[<p><a href="http://blog.rudylee.com/wp-content/uploads/2012/06/assembla.png"><img src="http://blog.rudylee.com/wp-content/uploads/2012/06/assembla-150x150.png" alt="" /></a>Recently, I just canceled my <a href="http://www.github.com">Github</a> micro plan and moved all my private projects to <a href="http://www.assembla.com/">Assembla</a>. Similar to Github, Assembla also offers Git hosting and you can host private projects for free. There are several paid plans that you can choose which basically add more features such as ticketing system, wiki, FTP build, supports, etc. So if you are like me ( only need Git/SVN private hosting for your projects ), I suggest you to try Assembla.</p>

<p>Another great thing is no limitation of number of users that you can give access to your private projects. While in Github, the micro plan has limitation of one user that you can allow to access your projects.</p>

<p>There is not much I can comment about the UI as these two websites completely go in different direction. Github enhances social networking between programmers by allowing users to watch public project, fork and send pull request. This feature is very useful for open source projects to attract more contributions.</p>

<p>On the other side, Assembla does not seem to focus on public spaces. I can say that because I tried to search for PHP public project before and the search page returned &ldquo;Internal Server Error&rdquo;. Also, Assembla puts all your projects on the menu bar but only for three projects. You have to click more spaces and it will show up more projects that you have. This approach will make your life difficult if you have more than 10 projects.</p>

<p>Finally, I can say that I am happy with Assembla for the moment but I&rsquo;ll back to Github when I have bigger team and more open source projects to manage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cake Bunny website now using twitter bootstrap!]]></title>
    <link href="http://rudylee.github.io/2012/03/20/cake-bunny-website-now-using-twitter-bootstrap/"/>
    <updated>2012-03-20T12:52:00+11:00</updated>
    <id>http://rudylee.github.io/2012/03/20/cake-bunny-website-now-using-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p><a href="http://blog.rudylee.com/wp-content/uploads/2012/05/twitter-bootstrap.png"><img src="http://blog.rudylee.com/wp-content/uploads/2012/05/twitter-bootstrap-150x150.png" alt="" /></a>Today, I spent couple hours to update my <a href="http://www.rudylee.com/cbunny">Cake Bunny 1.0</a> and <a href="http://www.rudylee.com/cbunny2">Cake Bunny 2.0</a> websites. Cake Bunny is CakePHP website that I built to provide live demo for CakePHP tutorials in mt blog. At the moment, it has only two sample demos ( jQuery UI AutoComplete and jQuery UI AutoComplete Redirect).</p>

<p>I decided to make over the design using <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> instead of CakePHP default template. For you guys that haven&rsquo;t try twitter bootstrap yet, I suggest you give it a try. It has a lot of components inside it and provide you with basic layout ( pretty much similar with other CSS frameworks such as blueprint, 960, etc ).</p>

<p>And another great feature of twitter bootstrap is that you can build mobile friendly website by using what it called responsive design. Basically, it using Javascript to detect the browser that user using and will change certain elements to follow the user browser.</p>

<p><a href="http://twitter.github.com/bootstrap/">Click here to find out more about Twitter Bootstrap!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails set up namespace and redirect from namespace]]></title>
    <link href="http://rudylee.github.io/2012/02/12/rails-set-up-namespace-and-redirect-from-namespace/"/>
    <updated>2012-02-12T13:02:27+11:00</updated>
    <id>http://rudylee.github.io/2012/02/12/rails-set-up-namespace-and-redirect-from-namespace</id>
    <content type="html"><![CDATA[<p>In order to differentiate between admin actions and users actions, you can set up what called &ldquo;namespace&rdquo; in your rails apps. The basic idea of this feature is you will have different controller and view files for each role in your application.</p>

<p>This concept is similar with prefixes in CakePHP. However,  CakePHP allows you to put different action in one controller file, while in rails you have to create different controller and view file for the new namespace. Here is the sample namespace code that I put in my routes.rb file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:admin</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:users</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:products</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:categories</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code means that users, products and categories will have admin namespace. The next step is to create new folder in your controller and view folder called &ldquo;admin&rdquo;. Here is the screenshot ( see the directory browser on the left hand side ) :</p>

<p><a href="http://blog.rudylee.com/wp-content/uploads/2012/04/routes-rb.png"><img src="http://blog.rudylee.com/wp-content/uploads/2012/04/routes-rb-150x150.png" alt="" /></a></p>

<p>Put the template and controller files inside these folders. You have to add Admin:: in front of the class definition of your controller file. So it&rsquo;s gonna be like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you set up everything done, you can try to access your apps through <a href="http://your-url/admin/controller-path">http://your-url/admin/controller-path</a> ( ex: <a href="http://localhost:3000/admin/users">http://localhost:3000/admin/users</a> ). It should automatically pick the controller and view files from admin folder. And if you want to redirect to the original route, you have to add &lsquo;/&rsquo; in front of the controller name. Here is the code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">redirect_to</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">&quot;/sessions&quot;</span><span class="p">,</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;new&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It means you will redirect the user to session controller outside of the namespace and load &ldquo;new&rdquo; action. That&rsquo;s all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Execute JWPlayer shortcode in Wordpress custom template]]></title>
    <link href="http://rudylee.github.io/2012/01/08/execute-jwplayer-shortcode-in-wordpress-custom-template/"/>
    <updated>2012-01-08T12:51:22+11:00</updated>
    <id>http://rudylee.github.io/2012/01/08/execute-jwplayer-shortcode-in-wordpress-custom-template</id>
    <content type="html"><![CDATA[<p>JWPlayer has become my favorite video player for clients website especially after they release their <a href="http://wordpress.org/extend/plugins/jw-player-plugin-for-wordpress/">official Wordpress plugin</a>. The plugin almost done all the basic things ( shortcode, custom player, etc ). It&rsquo;s also integrated seamlessly with the Wordpress Media library which makes your life so much easier because you can easily add the player to a post straightly from media library. However, aside from all that simple integration and setup, it lacks of documentation could cause a headache especially if you are trying to do something out of the lane.</p>

<p>Today, I was trying to use JWPlayer plugin to show video in a custom post type template which grab the video file from external URL ( not from Media Library ). I was thinking this would be an easy task because I could easily execute the shortcode using do_shortcode() function in Wordpress. But, apparently JWPlayer plugin handle the shortcode quite different from another plugin so you have to use jwplayer_tag_callback() function instead of do_shortcode(). I don&rsquo;t know the reason why they make it like that but as long as it works then it&rsquo;s fine. Here is the sample code to make it clear:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">//won&#39;t work</span>
</span><span class='line'><span class="nx">do_shortcode</span><span class="p">(</span><span class="s2">&quot;[jwplayer file=&#39;http://xxx.com/xxx.mp4&#39;]&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//obviously will work</span>
</span><span class='line'><span class="nx">jwplayer_tag_callback</span><span class="p">(</span><span class="s2">&quot;[jwplayer file=&#39;http://xxx.com/xxx.mp4&#39;]&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto redirect in CakePHP jQuery AutoComplete ]]></title>
    <link href="http://rudylee.github.io/2011/12/12/auto-redirect-in-cakephp-jquery-autocomplete/"/>
    <updated>2011-12-12T15:11:56+11:00</updated>
    <id>http://rudylee.github.io/2011/12/12/auto-redirect-in-cakephp-jquery-autocomplete</id>
    <content type="html"><![CDATA[<blockquote><h2>Demo : <a href="http://cbunny.rudylee.com/autocomplete_redirect">http://cbunny.rudylee.com/autocomplete_redirect</a></h2>

<p>Demo source code :<a href="https://github.com/rudylee/cbunny"> https://github.com/rudylee/cbunny</a></p></blockquote>

<p>In my previous post ( <a href="http://blog.rudylee.com/2011/07/25/jquery-ui-autocomplete-in-cakephp/">http://blog.rudylee.com/2011/07/25/jquery-ui-autocomplete-in-cakephp/</a> ) we have successfully integrated the jQuery AutoComplete with CakePHP with a little bit hacky way. Now we gonna add another feature that can redirect user to our desired place when they click the result value in the AutoComplete ( try the demo for more details ).</p>

<p>So let&rsquo;s start the coding ( I assume you have integrated the jQuery UI AutoComplete in your apps, if you haven&rsquo;t, just read my previous post ), so basically what we need to do are divided into 4 steps:</p>

<ul>
<li><p>Wrap the jQuery UI AutoComplete search field in a form tag.</p></li>
<li><p>Add a hidden field which will hold the ID of the result.</p></li>
<li><p>Add &lsquo;select&rsquo; option into the helper.</p></li>
<li><p>Set up the action that will handle the form submit</p></li>
</ul>


<p>Here is the sample of the action code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">admin_autoComplete</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;view&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Guest&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">autoRender</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$guests</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">getGuests</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;OR&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;User.name LIKE&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;%&#39;</span> <span class="o">.</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;term&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;%&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;User.surname LIKE&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;%&#39;</span> <span class="o">.</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;term&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;%&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="p">));</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">autoComplete_encode</span><span class="p">(</span><span class="nv">$guests</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just ignore line 8 and so, we gonna focus on line 2 to 7. In that line, I redirect the user to the view action which based on the Guest ID which I got from the form. You can change the controller/action in this section. I hope everything are clear. Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Holiday has arrived]]></title>
    <link href="http://rudylee.github.io/2011/11/23/holiday-has-arrived/"/>
    <updated>2011-11-23T18:40:11+11:00</updated>
    <id>http://rudylee.github.io/2011/11/23/holiday-has-arrived</id>
    <content type="html"><![CDATA[<p><a href="http://blog.rudylee.com/wp-content/uploads/2011/11/3048143981_e990820985_z1.jpg"><img src="http://blog.rudylee.com/wp-content/uploads/2011/11/3048143981_e990820985_z1.jpg" alt="" /></a></p>

<p>Today is the last day of my exams and I will have holiday for 3 months. It&rsquo;s quite long considering that you spent the same amount of time for study as well. That means in one semester you will have 3 months study and another 3 months for holiday. From my perspective, it&rsquo;s not efficient, wasting time and of course wasting money :D. But who am I to judge the system, the system is there for a reason which I don&rsquo;t care much.</p>

<p>So what is my plan for holiday ? not sure, I was planning to go back to Indonesia but looks like I am gonna trapped here with a bunch of works to do. I wish I can surprise my girlfriend by I suddenly appear at her rented room and let her hug me tightly like in the movies but looks like that impossible to happen at the moment. I hope she can understand ( I know she can&rsquo;t :( ).</p>

<p>By the way, I have a number of tasks that need to be done during this break. First thing is to renew my passport which will be expired in January 2012. Without this passport, I can&rsquo;t go back to Indonesia because you need to have passport that expired more than 6 months if you are planning to go overseas. That&rsquo;s what I have been told, not sure whether it&rsquo;s true or not. It cost around 40$ to get a new passport, not too expensive considering the living cost in here is far different from Indonesia ( 40$ is just like 200k in Indonesian rupiah ).</p>

<p>The second thing is to find new place to stay that closer to my university. My current place is not bad at all considering I have lived there for almost 1 year, quite comfortable with the people that live there and it&rsquo;s just around 20-30 minutes walk from my university. But, I think it&rsquo;s better if I can find a place that nearer to my university and of course cheaper :D</p>

<p>The third one and the final one is to complete pending projects that have been waiting for months. Most of them are fun projects which I created to learn new technology. Fascinating, but the reality is not easy as it looks especially because I am well-known for being undisciplined and unmotivated person.</p>

<p>That&rsquo;s all my story for this month, still need to write a blog post for last month :D</p>

<p>Picture is taken from <a href="http://www.flickr.com/photos/8810648@N03/3048143981/">http://www.flickr.com/photos/8810648@N03/3048143981/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Short conversation with my mom]]></title>
    <link href="http://rudylee.github.io/2011/10/23/short-conversation-with-my-mom/"/>
    <updated>2011-10-23T18:54:59+11:00</updated>
    <id>http://rudylee.github.io/2011/10/23/short-conversation-with-my-mom</id>
    <content type="html"><![CDATA[<p>Sepenggal perbincangan di telepon dengan nyokap&hellip;</p>

<p>Gwa: Jadi kapan koko ted bakal married ? ( koko ted adalah panggilan gwa buat koko gwa :P )</p>

<p>Nyokap: Belom tau, rumah aja blom selesai dibangun.</p>

<p>Gwa: Oh gitu&hellip;</p>

<p>Nyokap: Jadi setelah si Teddy married, giliran lu lagi la ?</p>

<p>Gwa: Enggak donk&hellip; kan beda umur gwa ama koko 5 tahun&hellip; jadi gwa married masih 5 tahun lagi&hellip;</p>

<p>Nyokap: Emang orang tuanya Riani bolehin ? bukannya biasanya orang tua suka ketar ketir kalo belum jelas kek begini. Kalau gwa jadi orang tuanya pun khawatir.</p>

<p>Gwa: &hellip;</p>

<p>PS : kata2 sedikit diubah agar mudah dimengerti</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reasons why I hate long weekend]]></title>
    <link href="http://rudylee.github.io/2011/09/30/reasons-why-i-hate-long-weekend/"/>
    <updated>2011-09-30T17:44:44+10:00</updated>
    <id>http://rudylee.github.io/2011/09/30/reasons-why-i-hate-long-weekend</id>
    <content type="html"><![CDATA[<h1><strong>Too much sleep</strong></h1>

<p><a href="http://blog.rudylee.com/wp-content/uploads/2011/10/302271589_0a29afd756_z.jpg"><img src="http://blog.rudylee.com/wp-content/uploads/2011/10/302271589_0a29afd756_z.jpg" alt="" /></a></p>

<h1><strong>Less productive</strong></h1>

<p><a href="http://blog.rudylee.com/wp-content/uploads/2011/10/857874987_d8a2142d2a_z.jpg"><img src="http://blog.rudylee.com/wp-content/uploads/2011/10/857874987_d8a2142d2a_z.jpg" alt="" /></a></p>

<h1><strong>Tasks waiting after holiday</strong></h1>

<p><a href="http://blog.rudylee.com/wp-content/uploads/2011/10/6192893731_716e3567e1_z.jpg"><img src="http://blog.rudylee.com/wp-content/uploads/2011/10/6192893731_716e3567e1_z.jpg" alt="" /></a></p>

<h1></h1>

<h1><strong>and</strong></h1>

<h1></h1>

<h1><strong>Far away from your girlfriend</strong></h1>

<h1><a href="http://blog.rudylee.com/wp-content/uploads/2011/10/5422183699_ceda9b84c6_z.jpg"><img src="http://blog.rudylee.com/wp-content/uploads/2011/10/5422183699_ceda9b84c6_z.jpg" alt="" /></a></h1>
]]></content>
  </entry>
  
</feed>
